# Generated by Django 5.2.4 on 2025-08-05 18:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_remove_sku_unique_constraint'),
        ('stores', '0002_store_tenant'),
        ('tenants', '0002_tenant_google_maps_url'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='category',
            name='scope',
            field=models.CharField(choices=[('global', 'Global'), ('store', 'Store')], default='store', help_text='Global categories are visible to all stores, Store categories are store-specific', max_length=10),
        ),
        migrations.AddField(
            model_name='category',
            name='store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='stores.store'),
        ),
        migrations.AddField(
            model_name='product',
            name='scope',
            field=models.CharField(choices=[('global', 'Global'), ('store', 'Store')], default='store', help_text='Global products are visible to all stores, Store products are store-specific', max_length=10),
        ),
        migrations.AddField(
            model_name='product',
            name='store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='stores.store'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('name', 'tenant', 'store')},
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('sku', 'tenant', 'store')},
        ),
        migrations.CreateModel(
            name='StockTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('reason', models.TextField(help_text='Reason for transfer')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('transfer_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transfer_approvals', to=settings.AUTH_USER_MODEL)),
                ('from_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfers', to='stores.store')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='products.product')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('to_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfers', to='stores.store')),
            ],
            options={
                'verbose_name': 'Stock Transfer',
                'verbose_name_plural': 'Stock Transfers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('reserved_quantity', models.PositiveIntegerField(default=0, help_text='Items reserved for pending orders')),
                ('reorder_point', models.PositiveIntegerField(default=0, help_text='Stock level at which to reorder')),
                ('max_stock', models.PositiveIntegerField(default=1000, help_text='Maximum stock level')),
                ('location', models.CharField(blank=True, help_text='Specific location within store', max_length=100, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='products.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='stores.store')),
            ],
            options={
                'verbose_name': 'Product Inventory',
                'verbose_name_plural': 'Product Inventories',
                'ordering': ['-last_updated'],
                'unique_together': {('product', 'store')},
            },
        ),
    ]
