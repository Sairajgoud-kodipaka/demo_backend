# Generated by Django 5.2.4 on 2025-07-25 19:12

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clients', '0012_alter_appointment_options_appointment_assigned_to_and_more'),
        ('stores', '0002_store_tenant'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Goal title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Goal description', null=True)),
                ('goal_type', models.CharField(choices=[('sales', 'Sales Goal'), ('leads', 'Lead Generation Goal'), ('customer_satisfaction', 'Customer Satisfaction Goal'), ('task_completion', 'Task Completion Goal'), ('revenue', 'Revenue Goal'), ('custom', 'Custom Goal')], default='sales', help_text='Type of goal', max_length=30)),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', help_text='Goal period', max_length=20)),
                ('target_value', models.DecimalField(decimal_places=2, help_text='Target value for the goal', max_digits=15)),
                ('current_value', models.DecimalField(decimal_places=2, default=0.0, help_text='Current progress value', max_digits=15)),
                ('start_date', models.DateField(help_text='Goal start date')),
                ('end_date', models.DateField(help_text='Goal end date')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the goal is active')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the goal is completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(help_text='User assigned to this goal', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_goals', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this goal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_goals', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, help_text='Store this goal belongs to (null for individual goals)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='stores.store')),
            ],
            options={
                'verbose_name': 'Goal',
                'verbose_name_plural': 'Goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Task title', max_length=200)),
                ('description', models.TextField(help_text='Task description')),
                ('task_type', models.CharField(choices=[('sales', 'Sales Task'), ('follow_up', 'Follow-up Task'), ('customer_service', 'Customer Service Task'), ('administrative', 'Administrative Task'), ('training', 'Training Task'), ('custom', 'Custom Task')], default='custom', help_text='Type of task', max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Task priority level', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='pending', help_text='Current status of the task', max_length=20)),
                ('due_date', models.DateTimeField(help_text='Task due date and time')),
                ('start_date', models.DateTimeField(blank=True, help_text='When the task was started', null=True)),
                ('completed_date', models.DateTimeField(blank=True, help_text='When the task was completed', null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Task completion percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated hours to complete', max_digits=5, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Actual hours spent', max_digits=5, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the task', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(help_text='User who created/assigned this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_work_tasks', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(help_text='User assigned to this task', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_work_tasks', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, help_text='Related customer (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='work_tasks', to='clients.client')),
                ('goal', models.ForeignKey(blank=True, help_text='Related goal (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='work_tasks', to='tasks.goal')),
                ('store', models.ForeignKey(blank=True, help_text='Store this task belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='work_tasks', to='stores.store')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(help_text='User who wrote the comment', on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(help_text='Task this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tasks.worktask')),
            ],
            options={
                'verbose_name': 'Task Comment',
                'verbose_name_plural': 'Task Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Attached file', upload_to='task_attachments/')),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the file', on_delete=django.db.models.deletion.CASCADE, related_name='task_attachments', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(help_text='Task this attachment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tasks.worktask')),
            ],
            options={
                'verbose_name': 'Task Attachment',
                'verbose_name_plural': 'Task Attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
    ]
